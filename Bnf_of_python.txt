	input ::=
		<newlines>
		| <statements>

    

<<suite>>::=
    <stmt_list> NEWLINE
    | NEWLINE INDENT <statements> DEDENT
    
<statement>:
    <stmt_list> NEWLINE
    | <compound_stmt>
    
<statements>::=
    <statement>
    | <statements> <statement>
    
<stmt_list>::=
    <simple_stmt>
    | <simple_stmt> ';'
    | <simple_stmt> <simple_stmts>
    | <simple_stmt> <simple_stmts> ';'
    
<simple_stmts>::=
    ';' <simple_stmt>
    | <simple_stmts> ';' <simple_stmt>

<newlines>::=
	NEWLINE
	| <newlines> NEWLINE

<simple_stmt>::=
	<expression_stmt>
	| <assignment_stmt>
	| <print_stmt>
	| <return_stmt>
	| <break_stmt>
	| <import_stmt>
		
<expression_stmt>::=
	<expression_list>


		
<assignment_stmt>::=
    <assignment_stmt_targer_list> <expression_list>
    
<assignment_stmt_targer_list>::=
    <target_list> '='
    | <assignment_stmt_targer_list> <target_list> '='
    


<print_stmt>::=
    PRINT
    | PRINT <expression>
    | PRINT <expression> ','
    | PRINT <expression> <expressions>
    | PRINT <expression> <expressions> ','
    | PRINT RIGHT_OP <expression>
    | PRINT RIGHT_OP <expression> <expressions>
    | PRINT RIGHT_OP <expression> <expressions> ','



<return_stmt>::=
    RETURN
    | RETURN <expression_list>

<break_stmt>::=
    BREAK

<compound_stmt>::=
    <if_stmt>
    | <for_stmt>
    | <funcdef>
    | <classdef>

<if_stmt>::=
    IF <expression> ':' <suite>
    | IF <expression> ':' <suite> ELSE ':' <suite>
    | IF <expression> ':' <suite> <elif_stmt>
    | IF <expression> ':' <suite> <elif_stmt> ELSE ':' <suite>
		
<elif_stmt>::=
	ELIF <expression> ':' <suite>
    <elif_stmt> ELIF <expression> ':' <suite>
		
<for_stmt>:
    FOR <target_list> IN <expression_list> ':' <suite>
    | FOR <target_list> IN <expression_list> ':' <suite> ELSE ':' <suite>

<funcdef>::=
		DEF <funcname> '(' ')' ':' <suite>
		| <decorators> DEF <funcname> '(' ')' ':' <suite>
		| DEF <funcname> '(' <parameter_list> ')' ':' <suite>
		| <decorators> DEF <funcname> '(' <parameter_list> ')' ':' <suite>
		
<decorators>::=
    <decorator>
    | <decorators> <decorator>
    
<decorator>::=
    '@' <dotted_name> NEWLINE
    | '@' <dotted_name> '(' ')' NEWLINE
    | '@' <dotted_name> '(' <argument_list> ')' NEWLINE
    | '@' <dotted_name> '(' <argument_list> ',' ')' NEWLINE
    
<dotted_name>::=
    <identifier>
    | <identifier> <dot_identifiers>
    
<dot_identifiers>::=
    '.' <identifier>
    | <dot_identifiers> '.' <identifier>
    
<parameter_list>::=
    STAR <identifier>
    | STAR <identifier> ',' DOUBLESTAR <identifier>
    | DOUBLESTAR <identifier>
    | <defparameter>
    | <defparameter>','
    | <defparameters> STAR <identifier>
    | <defparameters> STAR <identifier> ',' DOUBLESTAR <identifier>
    | <defparameters> DOUBLESTAR <identifier>
    | <defparameters> defparameter
    | <defparameters> def<parameter >','
    
<defparameter>::=
    <parameter>
    | <parameter >'=' <expression>
    
<defparameters>::=
    defparameter >','
    | <defparameters> <defparameter >','

<sublist>::=
    <parameter>
    | <parameter >','
    | <parameter ><parameters>
    | <parameter ><parameters> ','

<parameter>::=
    <identifier>
    | '(' <sublist> ')'
    
<parameters>::=
    ',' <parameter >
    | <parameters> ',' <parameter>
    
<funcname>::=
    identifier
    
<classdef>::=
    CLASS <classname> ':' <suite>
    | CLASS <classname> <inheritance> ':' <suite>
    
<inheritance>::=
    '(' ')'
    | '(' <expression_list> ')'
    
<classname>::=
    <identifier>

<suite>::=
    <stmt_list> NEWLINE
    | NEWLINE INDENT <statements> DEDENT



<import_stmt>::=
		IMPORT< module >
		| IMPORT< module >AS <name>
		| IMPORT< module ><modules> 
		| IMPORT< module >AS <name> modules
		| FROM <relative_module> IMPORT <identifier>
		| FROM <relative_module> IMPORT <identifier> AS <name>
		| FROM <relative_module> IMPORT <identifier> <import_stmt_identifiers>
		| FROM <relative_module> IMPORT <identifier> AS <name> <import_stmt_identifiers>
		| FROM <relative_module> IMPORT '(' <identifier> ')'
		| FROM <relative_module> IMPORT '(' <identifier> AS <name> ')'
		| FROM <relative_module> IMPORT '(' <identifier> <import_stmt_identifiers> ')'
		| FROM <relative_module> IMPORT '(' <identifier> AS <name> <import_stmt_identifiers> ')'
		| FROM <relative_module> IMPORT '(' <identifier> ',' ')'
		| FROM <relative_module> IMPORT '(' <identifier> AS <name> ',' ')'
		| FROM <relative_module> IMPORT '(' <identifier> <import_stmt_identifiers> ',' ')'
		| FROM <relative_module> IMPORT '(' <identifier> AS <name> <import_stmt_identifiers> ',' ')'
		| FROM< module >IMPORT STAR
		
	<module>::=
		<identifier>
		|< module >'.' <module>
		
	<relative_module>::=
		<module>
		| <dot_modules>
		| <dots>
	
	<dot_modules>::=
		'.' <module>
		| <dot_modules> '.' module
		
	<dots>::=
		'.'
		| <dots> '.'
		
	<modules>::=
		',' <module>
		| ','< module >AS <name>
		| <modules> ',' <module>
		| <modules> ','< module >AS <name>
	
	<import_stmt_identifiers>::=
		',' <identifier>
		| ',' <identifier> AS <name>
		| <import_stmt_identifiers> ',' <identifier>
		| <import_stmt_identifiers> ',' <identifier> AS <name>
	
	<name>::=
		<identifier>




<primary>::=
		<atom>
		| <attributeref>
		| <call>	

<call>::=
		<primary> '(' ')'
		| <primary> '(' <argument_list> ')'
		| <primary> '(' <argument_list> ',' ')'


<argument_list>::=
		<positional_arguments>
		| <positional_arguments> ',' <keyword_arguments>
		| <positional_arguments> ',' STAR <expression>
		| <positional_arguments> ',' DOUBLESTAR <expression>
		| <positional_arguments> ',' <keyword_arguments> ',' STAR <<expression>>
		| <positional_arguments> ',' <keyword_arguments> ',' DOUBLESTAR <expression>
		| <positional_arguments> ',' STAR <expression> ',' DOUBLESTAR <expression>
		| <positional_arguments> ',' <keyword_arguments> ',' STAR <expression> ',' DOUBLESTAR <expression>
		| <keyword_arguments>
		| <keyword_arguments> ',' STAR <expression>
		| <keyword_arguments> ',' DOUBLESTAR <expression>
		| <keyword_arguments> ',' STAR <expression> ',' DOUBLESTAR <expression>
		| STAR <expression>
		| STAR <expression> ',' DOUBLESTAR <expression>
		| DOUBLESTAR <expression>

<positional_arguments>::=
    <expression>
    | <expression> <expressions>
    
<keyword_arguments>::=
    <keyword_item>
    | <keyword_item> <keyword_items>
    
<keyword_item>::=
    <identifier> '=' <expression>
    
<keyword_items>::=
    ',' <keyword_item>
    | <keyword_items> ',' <keyword_item>


<expression_list>::=
    <expression>
    | <expression> ','
    | <expression> <expressions>
    | <expression> <expressions> ','
    
<expressions>::=
    ',' <expression>
    | <expressions> ',' <expression>


<expression>::=
    <conditional_expression>
    | <lambda_form>



<conditional_expression>::=
		<or_test>
		| <or_test> IF <or_test> ELSE expression
    
<power>::=
    <primary>
    | DOUBLESTAR <u_expr>


<u_expr>::=
    power
    | '-' <u_expr>
    | '+' <u_expr>
    | '~' <u_expr>
    
<m_expr>::=
    <u_expr>
    | <m_expr> STAR <u_expr>
    | <m_expr> DOUBLESLASH <u_expr>
    | <m_expr> SLASH <u_expr>
    | <m_expr> '%' <u_expr>
    
<a_expr>::=
    <m_expr>
    | <a_expr> '+' <m_expr>
    | <a_expr> '-' <m_expr>
    
<shift_expr>::=
    <a_expr>
    | <shift_expr> RIGHT_OP <a_expr>
    | <shift_expr> LEFT_OP <a_expr>
    
<and_expr>::=
    <shift_expr>
    | <and_expr> '&' <shift_expr>
    
<xor_expr>::=
    <and_expr>
    | <xor_expr> '^' <and_expr>
    
< or_expr>::=
    <xor_expr>
    |< or_expr> '|' <xor_expr>
    
<comparison >::=
   < or_expr>
    | <comparison_operators_or_exprs>
    
<comparison_operators_or_exprs>::=
    <comp_operator>< or_expr>
    | <comparison_operators_or_exprs> <comp_operator> < or_expr>
    
<comp_operator>::=
    "<" | ">" | "==" | ">=" | "<=" | "<>" | "!="
    | IS | IS NOT | IN | NOT IN

<target_list>::=
    <target>
    | <target_list> ',' <target>
    | <target_list> ','
    
<target>::=
    <identifier>
    | '(' <target_list> ')'
    | '[' <target_list> ']'
    | <attributeref>



<attributeref>::=
		<primary> '.' <identifier>		

<atom>::=
		<identifier>
		| <literal>
		| <enclosure>

		
<enclosure>::=
		<parenth_form>
		| <dict_display>

<parenth_form>::=
    '(' ')'
    | '(' <expression_list> ')'


<dict_display>::=
    '{' '}'
    | '{' <key_datum_list> '}'

    
<key_datum_list>::=
    <key_datum>
    | <key_datum >','
    | <key_datum ><key_datums>
    | <key_datum ><key_datums> ','

        
<key_datums>::=
    ',' <key_datum>
    | <key_datums> ',' <key_datum>

    
<key_datum >::=
    <expression >':' <expression>

		

<identifier>::=
    IDENTIFIER

<stringliteral>::=
    SHORTSTRING | LONGSTRING

<longinteger>::=
    <integer> 'l' | <integer> 'L'
    
<integer>::=
    DECINTEGER | OCTINTEGER | HEXINTEGER
    
<floatnumber>::=
    POINTFLOAT | EXPONENTFLOAT

<imagnumber>::=
    IMAGNUMBER